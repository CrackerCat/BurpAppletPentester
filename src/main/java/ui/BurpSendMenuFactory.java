package ui;
import burp.*;

import javax.swing.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class BurpSendMenuFactory implements IContextMenuFactory {
    private static BurpExtender parent;

    public BurpSendMenuFactory(BurpExtender parent) {
        this.parent = parent;
    }

    public static String re_regex(String input,String patternString) {

        Pattern pattern = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(input);

        String result = "";

        while (matcher.find()) {
            if (matcher.group(3) != null){
                result = matcher.group(3);
            }else {
                result = matcher.group(5);
            }
        }
        if (result.length() > 0){
            try {
                result = result.replace("+","%2B");
                result = java.net.URLDecoder.decode(result, "UTF-8");
            } catch (Exception e) {
                parent.callbacks.printOutput("UrlDecode Err:" + e.toString());
            }
            return result;
        }else {
            return "";
        }
    }

    @Override
    public List<JMenuItem> createMenuItems(IContextMenuInvocation iContextMenuInvocation) {
        ArrayList<JMenuItem> menus = new ArrayList<>();
        //匹配json
//        String KeyRule = "\"[\\w]*session[\\S]?Key\"\\s?:\\s?\"([A-Za-z0-9\\/\\+=%]+)\"";
//        String IvRule = "\"[\\w]*iv\"\\s?:\\s?\"([A-Za-z0-9\\/\\+=%]+)\"";
//        String DataRule = "\"[\\w]*encrypt[\\w]*Data\"\\s?:\\s?\"([A-Za-z0-9\\/\\+=%]+)\"";
        // json加其他类型匹配
        String KeyRule = "(\"[\\w]*session[\\S]?Key(bs64|b64|base64)?\"\\s?:\\s?\"([A-Za-z0-9\\/\\+=%]+)\"|[?&\\s][\\w]*session[\\S]?Key(bs64|b64|base64)?=([A-Za-z0-9\\/\\+=%]+))";
        String IvRule = "(\"[\\w]*iv(bs64|b64|base64)?\"\\s?:\\s?\"([A-Za-z0-9\\/\\+=%]+)\"|[?&\\s][\\w]*iv(bs64|b64|base64)?=([A-Za-z0-9\\/\\+=%]+))";
        String DataRule = "(\"[\\w]*encrypt[\\w]*Data(bs64|b64|base64)?\"\\s?:\\s?\"([A-Za-z0-9\\/\\+=%]+)\"|[?&\\s][\\w]*encrypt[\\w]*Data(bs64|b64|base64)?=([A-Za-z0-9\\/\\+=%]+))";

        JMenuItem SendKey = new JMenuItem("Send SessionKey");
        JMenuItem SendIv = new JMenuItem("Send IV");
        JMenuItem SendAll = new JMenuItem("Send ALL");


        SendAll.addActionListener(e -> {
            IHttpRequestResponse[] messages = iContextMenuInvocation.getSelectedMessages();
            if (messages.length > 0){
                for (IHttpRequestResponse message : messages) {
                    if (message.getResponse() != null) {
                        // 获取响应内容
                        byte[] response = message.getResponse();
                        // 输出响应内容
//                        parent.callbacks.printOutput(new String(response));
                        String res_key_result = re_regex(new String(response),KeyRule);
                        String res_iv_result = re_regex(new String(response),IvRule);
                        String res_data_result = re_regex(new String(response),DataRule);
//                        parent.callbacks.printOutput("response key:"+res_key_result);
//                        parent.callbacks.printOutput("response iv:"+res_iv_result);
//                        parent.callbacks.printOutput("response data:"+res_data_result);
                        if (res_key_result.length() > 0) {
                            CryptUI.getTextField3().setText(res_key_result);
                        }
                        if (res_iv_result.length() > 0) {
                            CryptUI.getTextField4().setText(res_iv_result);
                        }
                        if (res_data_result.length() > 0) {
                            CryptUI.getTextArea8().setText(res_data_result);
                        }
                    }
                    if (message.getRequest() != null) {
                        // 获取请求内容
                        byte[] request = message.getRequest();
                        // 输出请求内容
//                        parent.callbacks.printOutput(new String(request));
                        String res_key_result = re_regex(new String(request),KeyRule);
                        String res_iv_result = re_regex(new String(request),IvRule);
                        String res_data_result = re_regex(new String(request),DataRule);
//                        parent.callbacks.printOutput("request key:"+res_key_result);
//                        parent.callbacks.printOutput("request iv:"+res_iv_result);
//                        parent.callbacks.printOutput("request data:"+res_data_result);
                        if (res_key_result.length() > 0) {
                            CryptUI.getTextField3().setText(res_key_result);
                        }
                        if (res_iv_result.length() > 0) {
                            CryptUI.getTextField4().setText(res_iv_result);
                        }
                        if (res_data_result.length() > 0) {
                            CryptUI.getTextArea8().setText(res_data_result);
                        }

                    }
                }
            }
        });


        SendKey.addActionListener(e -> {
            IHttpRequestResponse[] messages = iContextMenuInvocation.getSelectedMessages();
            if (messages.length > 0){
                for (IHttpRequestResponse message : messages) {
                    if (message.getResponse() != null) {
                        // 获取响应内容
                        byte[] response = message.getResponse();
                        // 输出响应内容
//                        parent.callbacks.printOutput(new String(response));
                        String res_result = re_regex(new String(response),KeyRule);
//                        parent.callbacks.printOutput("response key:"+res_result);
                        if (res_result.length() > 0) {
                            CryptUI.getTextField3().setText(res_result);
                        }
                    }
                    if (message.getRequest() != null) {
                        // 获取请求内容
                        byte[] request = message.getRequest();
                        // 输出请求内容
//                        parent.callbacks.printOutput(new String(request));
                        String req_result = re_regex(new String(request),KeyRule);
//                        parent.callbacks.printOutput("request key:"+req_result);
                        if (req_result.length() > 0) {
                            CryptUI.getTextField3().setText(req_result);
                        }

                    }
                }
            }
        });


        SendIv.addActionListener(e -> {
            IHttpRequestResponse[] messages = iContextMenuInvocation.getSelectedMessages();
            if (messages.length > 0){
                for (IHttpRequestResponse message : messages) {
                    if (message.getResponse() != null) {
                        // 获取响应内容
                        byte[] response = message.getResponse();
                        // 输出响应内容
//                        parent.callbacks.printOutput(new String(response));
                        String res_result = re_regex(new String(response),IvRule);
//                        parent.callbacks.printOutput("response iv:"+res_result);
                        if (res_result.length() > 0) {
                            CryptUI.getTextField4().setText(res_result);
                        }
                    }
                    if (message.getRequest() != null) {
                        // 获取请求内容
                        byte[] request = message.getRequest();
                        // 输出请求内容
//                        parent.callbacks.printOutput(new String(request));
                        String req_result = re_regex(new String(request),IvRule);
//                        parent.callbacks.printOutput("request iv:"+req_result);
                        if (req_result.length() > 0) {
                            CryptUI.getTextField4().setText(req_result);
                        }

                    }
                }
            }
        });



        menus.add(SendKey);
        menus.add(SendIv);
        menus.add(SendAll);


        return menus;
    }
}
